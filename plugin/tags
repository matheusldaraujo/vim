!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<2-LeftMouse>	project.vim	/^        nnoremap <buffer> <silent> <2-LeftMouse>   \\|:call <SID>DoFoldOrOpenEntry('', 'e')<CR>$/;"	m
<2-RightMouse>	project.vim	/^        nmap     <buffer> <silent> <2-RightMouse> <space>$/;"	m
<3-LeftMouse>	project.vim	/^        nnoremap <buffer> <silent> <3-LeftMouse>  <Nop>$/;"	m
<3-RightMouse>	project.vim	/^        nmap     <buffer> <silent> <3-RightMouse> <space>$/;"	m
<4-RightMouse>	project.vim	/^        nmap     <buffer> <silent> <4-RightMouse> <space>$/;"	m
<C-2-LeftMouse>	project.vim	/^        nmap     <buffer> <silent> <C-2-LeftMouse> <C-Return>$/;"	m
<C-Down>	project.vim	/^        nnoremap <buffer> <silent> <C-Down> \\|:silent call <SID>MoveDown()<CR>$/;"	m
<C-LeftMouse>	project.vim	/^        nnoremap <buffer> <silent> <C-LeftMouse>   <LeftMouse>$/;"	m
<C-Return>	project.vim	/^        nnoremap <buffer> <silent> <C-Return> \\|:call <SID>DoFoldOrOpenEntry('silent! only', 'e')<CR>$/;"	m
<C-Up>	project.vim	/^        nnoremap <buffer> <silent> <C-Up>   \\|:silent call <SID>MoveUp()<CR>$/;"	m
<C-W><C-O>	project.vim	/^                nmap <silent> <unique> <C-W><C-O> <C-W>o$/;"	m
<C-W>o	project.vim	/^                nmap <silent> <unique> <C-W>o <Plug>ProjectOnly$/;"	m
<C-^>	project.vim	/^        nnoremap <buffer> <silent> <C-^> <Nop>$/;"	m
<F12>	project.vim	/^        nmap <silent> <F12> <Plug>ToggleProject$/;"	m
<F1>	project.vim	/^        nnoremap <buffer> <F1> :let g:proj_doinghelp = 1<CR><F1>$/;"	m
<F5>	project.vim	/^        nnoremap <buffer> <silent>           <F5> :call <SID>RefreshEntriesFromDir(1)<CR>$/;"	m
<Leader>lcs	c.vim	/^	nmap  <unique>  <silent>  <Leader>lcs   :call C_CreateGuiMenus()<CR>$/;"	m
<Leader>ucs	c.vim	/^	nmap  <unique>  <silent>  <Leader>ucs   :call C_RemoveGuiMenus()<CR>$/;"	m
<LocalLeader>0	project.vim	/^        nnoremap <buffer>          <LocalLeader>0 \\|:call <SID>ListSpawn("")<CR>$/;"	m
<LocalLeader><Down>	project.vim	/^        nmap     <buffer> <silent> <LocalLeader><Down> <C-Down>$/;"	m
<LocalLeader><Up>	project.vim	/^        nmap     <buffer> <silent> <LocalLeader><Up> <C-Up>$/;"	m
<LocalLeader>C	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>C :call <SID>CreateEntriesFromDir(1)<CR>$/;"	m
<LocalLeader>E	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>E :call <SID>OpenEntry(line('.'), '', 'e', 1)<CR>$/;"	m
<LocalLeader>F0	project.vim	/^        nnoremap <buffer>          <LocalLeader>F0 \\|:call <SID>ListSpawn("_fold")<CR>$/;"	m
<LocalLeader>G	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>G \\|:call <SID>GrepAll(1, line('.'), "")<CR>$/;"	m
<LocalLeader>I	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>I :echo Project_GetFname(line('.'))<CR>$/;"	m
<LocalLeader>L	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>L \\|:call <SID>LoadAll(1, line('.'))<CR>$/;"	m
<LocalLeader>R	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>R :call <SID>RefreshEntriesFromDir(1)<CR>$/;"	m
<LocalLeader>S	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>S \\|:call <SID>LoadAllSplit(0, line('.'))<CR>$/;"	m
<LocalLeader>T	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>T \\|:call <SID>DoFoldOrOpenEntry('', 'tabe')<CR>$/;"	m
<LocalLeader>W	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>W \\|:call <SID>WipeAll(1, line('.'))<CR>$/;"	m
<LocalLeader>c	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>c :call <SID>CreateEntriesFromDir(0)<CR>$/;"	m
<LocalLeader>e	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>e :call <SID>OpenEntry(line('.'), '', '', 0)<CR>$/;"	m
<LocalLeader>f0	project.vim	/^        nnoremap <buffer>          <LocalLeader>f0 \\|:call <SID>ListSpawn("_fold")<CR>$/;"	m
<LocalLeader>g	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>g \\|:call <SID>GrepAll(0, line('.'), "")<CR>$/;"	m
<LocalLeader>i	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>i :echo <SID>RecursivelyConstructDirectives(line('.'))<CR>$/;"	m
<LocalLeader>l	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>l \\|:call <SID>LoadAll(0, line('.'))<CR>$/;"	m
<LocalLeader>o	project.vim	/^        nmap     <buffer> <silent> <LocalLeader>o <C-Return>$/;"	m
<LocalLeader>r	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>r :call <SID>RefreshEntriesFromDir(0)<CR>$/;"	m
<LocalLeader>s	project.vim	/^        nmap     <buffer> <silent> <LocalLeader>s <S-Return>$/;"	m
<LocalLeader>v	project.vim	/^        nmap     <buffer> <silent> <LocalLeader>v <M-CR>$/;"	m
<LocalLeader>w	project.vim	/^        nnoremap <buffer> <silent> <LocalLeader>w \\|:call <SID>WipeAll(0, line('.'))<CR>$/;"	m
<M-2-LeftMouse>	project.vim	/^        nnoremap <buffer> <silent> <M-2-LeftMouse> <M-CR>$/;"	m
<M-CR>	project.vim	/^        nmap     <buffer> <silent> <M-CR> <Return><C-W>p$/;"	m
<Plug>ProjectOnly	project.vim	/^        nnoremap <script> <Plug>ProjectOnly :call <SID>DoProjectOnly()<CR>$/;"	m
<Plug>SuperTabBackward	supertab.vim	/^  imap <script> <Plug>SuperTabBackward <c-r>=<SID>SuperTab('p')<cr>$/;"	m
<Plug>SuperTabForward	supertab.vim	/^  imap <script> <Plug>SuperTabForward <c-r>=<SID>SuperTab('n')<cr>$/;"	m
<Plug>ToggleProject	project.vim	/^nnoremap <script> <Plug>ToggleProject :call <SID>DoToggleProject()<CR>$/;"	m
<Return>	project.vim	/^        nnoremap <buffer> <silent> <Return>   \\|:call <SID>DoFoldOrOpenEntry('', 'e')<CR>$/;"	m
<RightMouse>	project.vim	/^        nmap     <buffer> <silent> <RightMouse>   <space>$/;"	m
<S-2-LeftMouse>	project.vim	/^        nnoremap <buffer> <silent> <S-2-LeftMouse> \\|:call <SID>DoFoldOrOpenEntry('', 'sp')<CR>$/;"	m
<S-LeftMouse>	project.vim	/^        nnoremap <buffer> <silent> <S-LeftMouse>   <LeftMouse>$/;"	m
<S-Return>	project.vim	/^        nnoremap <buffer> <silent> <S-Return> \\|:call <SID>DoFoldOrOpenEntry('', 'sp')<CR>$/;"	m
<SID>xx	taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<c-n>	supertab.vim	/^    imap <c-n> <Plug>SuperTabForward$/;"	m
<c-p>	supertab.vim	/^    imap <c-p> <Plug>SuperTabBackward$/;"	m
<c-x>	supertab.vim	/^  imap <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<cr>	supertab.vim	/^      inoremap <cr> <c-r>=<SID>SelectCompletion(1)<cr>$/;"	m
<space>	project.vim	/^        nnoremap <buffer> <silent> <space>  \\|:silent exec 'vertical resize '.(match(g:proj_flags, '\\Ct')!=-1 && winwidth('.') > g:proj_window_width?(g:proj_window_width):(winwidth('.') + g:proj_window_increment))<CR>$/;"	m
C_AdjustLineEndComm	c.vim	/^function! C_AdjustLineEndComm ( mode ) range$/;"	f
C_ApplyFlag	c.vim	/^function! C_ApplyFlag ( val, flag )$/;"	f
C_Arguments	c.vim	/^function! C_Arguments ()$/;"	f
C_BrowseTemplateFiles	c.vim	/^function! C_BrowseTemplateFiles ( type )$/;"	f
C_C99LibraryIncludesInsert	c.vim	/^function! C_C99LibraryIncludesInsert ( arg )$/;"	f
C_C99LibraryIncludesList	c.vim	/^function!	C_C99LibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CFileSectionList	c.vim	/^function!	C_CFileSectionList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CFileSectionListInsert	c.vim	/^function! C_CFileSectionListInsert ( arg )$/;"	f
C_CIncludeMenus	c.vim	/^function! C_CIncludeMenus ( menupath, liblist )$/;"	f
C_CIosFlagMenus	c.vim	/^function! C_CIosFlagMenus ( menupath, flaglist )$/;"	f
C_CheckForMain	c.vim	/^function! C_CheckForMain ()$/;"	f
C_CheckGlobal	c.vim	/^function! C_CheckGlobal ( name )$/;"	f
C_CleanDirNameList	c.vim	/^function! C_CleanDirNameList ( list )$/;"	f
C_CodeCheck	c.vim	/^function! C_CodeCheck ()$/;"	f
C_CodeCheckArguments	c.vim	/^function! C_CodeCheckArguments ()$/;"	f
C_CodeComment	c.vim	/^function! C_CodeComment( mode, style )$/;"	f
C_CodeFor	c.vim	/^function! C_CodeFor( direction, mode )$/;"	f
C_CodeSnippet	c.vim	/^function! C_CodeSnippet(mode)$/;"	f
C_CommentCToCpp	c.vim	/^function! C_CommentCToCpp()$/;"	f
C_CommentCode	c.vim	/^function! C_CommentCode(mode)$/;"	f
C_CommentCppToC	c.vim	/^function! C_CommentCppToC()$/;"	f
C_Comment_C_SectionAll	c.vim	/^function! C_Comment_C_SectionAll ( type )$/;"	f
C_Comment_H_SectionAll	c.vim	/^function! C_Comment_H_SectionAll ( type )$/;"	f
C_Compile	c.vim	/^function! C_Compile ()$/;"	f
C_CppCLibraryIncludesInsert	c.vim	/^function! C_CppCLibraryIncludesInsert ( arg )$/;"	f
C_CppCLibraryIncludesList	c.vim	/^function!	C_CppCLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CppLibraryIncludesInsert	c.vim	/^function! C_CppLibraryIncludesInsert ( arg )$/;"	f
C_CppLibraryIncludesList	c.vim	/^function!	C_CppLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_CreateGuiMenus	c.vim	/^function! C_CreateGuiMenus ()$/;"	f
C_DateAndTime	c.vim	/^function! C_DateAndTime ( format )$/;"	f
C_EscapeBlanks	c.vim	/^function! C_EscapeBlanks (arg)$/;"	f
C_ExpandSingleMacro	c.vim	/^function! C_ExpandSingleMacro ( val, macroname, replacement )$/;"	f
C_ExpandUserMacros	c.vim	/^function! C_ExpandUserMacros ( key )$/;"	f
C_ForTypeComplete	c.vim	/^function!	C_ForTypeComplete ( ArgLead, CmdLine, CursorPos )$/;"	f
C_GetLineEndCommCol	c.vim	/^function! C_GetLineEndCommCol ()$/;"	f
C_HFileSectionList	c.vim	/^function!	C_HFileSectionList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_HFileSectionListInsert	c.vim	/^function! C_HFileSectionListInsert ( arg )$/;"	f
C_Hardcopy	c.vim	/^function! C_Hardcopy (mode)$/;"	f
C_Help	c.vim	/^function! C_Help( type )$/;"	f
C_HelpCsupport	c.vim	/^function! C_HelpCsupport ()$/;"	f
C_HighlightJumpTargets	c.vim	/^function! C_HighlightJumpTargets ()$/;"	f
C_HlMessage	c.vim	/^function! C_HlMessage ( ... )$/;"	f
C_IncludesInsert	c.vim	/^function! C_IncludesInsert ( arg, List )$/;"	f
C_IncludesList	c.vim	/^function!	C_IncludesList ( ArgLead, CmdLine, CursorPos, List )$/;"	f
C_Indent	c.vim	/^function! C_Indent ( )$/;"	f
C_InitMenuHeaeders	c.vim	/^function! C_InitMenuHeaeders ()$/;"	f
C_InitMenus	c.vim	/^function! C_InitMenus ()$/;"	f
C_Input	c.vim	/^function! C_Input ( promp, text, ... )$/;"	f
C_InsertDateAndTime	c.vim	/^function! C_InsertDateAndTime ( format )$/;"	f
C_InsertMacroValue	c.vim	/^function! C_InsertMacroValue ( key )$/;"	f
C_InsertTemplate	c.vim	/^function! C_InsertTemplate ( key, ... )$/;"	f
C_InsertTemplateWrapper	c.vim	/^function! C_InsertTemplateWrapper ()$/;"	f
C_JumpCtrlJ	c.vim	/^function! C_JumpCtrlJ ()$/;"	f
C_KeywordCommentList	c.vim	/^function!	C_KeywordCommentList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_KeywordCommentListInsert	c.vim	/^function! C_KeywordCommentListInsert ( arg )$/;"	f
C_LegalizeName	c.vim	/^function! C_LegalizeName ( name )$/;"	f
C_LineEndComment	c.vim	/^function! C_LineEndComment ( )$/;"	f
C_Link	c.vim	/^function! C_Link ()$/;"	f
C_Make	c.vim	/^function! C_Make()$/;"	f
C_MakeArguments	c.vim	/^function! C_MakeArguments ()$/;"	f
C_MakeClean	c.vim	/^function! C_MakeClean()$/;"	f
C_MakeExeToRun	c.vim	/^function! C_MakeExeToRun ()$/;"	f
C_MenuTitle	c.vim	/^function! C_MenuTitle ()$/;"	f
C_MultiLineEndComments	c.vim	/^function! C_MultiLineEndComments ( )$/;"	f
C_OpenFold	c.vim	/^function! C_OpenFold ( mode )$/;"	f
C_PPIf0	c.vim	/^function! C_PPIf0 (mode)$/;"	f
C_PPIf0Remove	c.vim	/^function! C_PPIf0Remove ()$/;"	f
C_ProtoClear	c.vim	/^function! C_ProtoClear ()$/;"	f
C_ProtoInsert	c.vim	/^function! C_ProtoInsert ()$/;"	f
C_ProtoPick	c.vim	/^function! C_ProtoPick (mode)$/;"	f
C_ProtoShow	c.vim	/^function! C_ProtoShow ()$/;"	f
C_ReadTemplates	c.vim	/^function! C_ReadTemplates ( templatefile )$/;"	f
C_RemoveCComment	c.vim	/^function! C_RemoveCComment( start, end )$/;"	f
C_RemoveGuiMenus	c.vim	/^function! C_RemoveGuiMenus ()$/;"	f
C_RemoveSpecialCharacters	c.vim	/^function! s:C_RemoveSpecialCharacters ( )$/;"	f
C_RereadTemplates	c.vim	/^function! C_RereadTemplates ( msg )$/;"	f
C_Run	c.vim	/^function! C_Run ()$/;"	f
C_SetSmallCommentStyle	c.vim	/^function! C_SetSmallCommentStyle ()$/;"	f
C_Settings	c.vim	/^function! C_Settings ()$/;"	f
C_SpecialCommentList	c.vim	/^function!	C_SpecialCommentList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_SpecialCommentListInsert	c.vim	/^function! C_SpecialCommentListInsert ( arg )$/;"	f
C_SplintArguments	c.vim	/^function! C_SplintArguments ()$/;"	f
C_SplintCheck	c.vim	/^function! C_SplintCheck ()$/;"	f
C_StdLibraryIncludesInsert	c.vim	/^function! C_StdLibraryIncludesInsert ( arg )$/;"	f
C_StdLibraryIncludesList	c.vim	/^function!	C_StdLibraryIncludesList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_Style	c.vim	/^function! C_Style ( style )$/;"	f
C_StyleList	c.vim	/^function!	C_StyleList ( ArgLead, CmdLine, CursorPos )$/;"	f
C_Toggle_Gvim_Xterm	c.vim	/^function! C_Toggle_Gvim_Xterm ()$/;"	f
C_ToolMenu	c.vim	/^function! C_ToolMenu ()$/;"	f
C_XtermSize	c.vim	/^function! C_XtermSize ()$/;"	f
CaptureKeyPresses	supertab.vim	/^function! s:CaptureKeyPresses()$/;"	f
CommandLineCompletion	supertab.vim	/^function! s:CommandLineCompletion()$/;"	f
CompletionReset	supertab.vim	/^function! s:CompletionReset(char)$/;"	f
ConstructInfo	project.vim	/^    function! s:ConstructInfo(home, c_d, scriptin, scriptout, flags, filter)$/;"	f
ContextCompletion	supertab.vim	/^function! s:ContextCompletion()$/;"	f
ContextDiscover	supertab.vim	/^function! s:ContextDiscover()$/;"	f
ContextText	supertab.vim	/^function! s:ContextText()$/;"	f
CreateEntriesFromDir	project.vim	/^    function! s:CreateEntriesFromDir(recursive)$/;"	f
DisplayInfo	project.vim	/^    function! s:DisplayInfo()$/;"	f
DoEnsurePlacementSize_au	project.vim	/^    function! s:DoEnsurePlacementSize_au()$/;"	f
DoEntryFromDir	project.vim	/^    function! s:DoEntryFromDir(recursive, line, name, absolute_dir, dir, c_d, filter_directive, filter, foldlev, sort)$/;"	f
DoFoldOrOpenEntry	project.vim	/^    function! s:DoFoldOrOpenEntry(cmd0, cmd1)$/;"	f
DoProjectOnly	project.vim	/^        function! s:DoProjectOnly()$/;"	f
DoSetup	project.vim	/^    function! s:DoSetup()$/;"	f
DoSetupAndSplit	project.vim	/^    function! s:DoSetupAndSplit()$/;"	f
DoSetupAndSplit_au	project.vim	/^    function! s:DoSetupAndSplit_au()$/;"	f
DoToggleProject	project.vim	/^    function! s:DoToggleProject()$/;"	f
EnableLongestEnhancement	supertab.vim	/^function! s:EnableLongestEnhancement()$/;"	f
ExpandMap	supertab.vim	/^function! s:ExpandMap(map)$/;"	f
FindFoldBottom	project.vim	/^    function! s:FindFoldBottom(line)$/;"	f
FindFoldTop	project.vim	/^    function! s:FindFoldTop(line)$/;"	f
ForwardBack	supertab.vim	/^  function! s:ForwardBack(command, map)$/;"	f
GenerateEntry	project.vim	/^    function! s:GenerateEntry(recursive, line, name, absolute_dir, dir, c_d, filter_directive, filter, foldlev, sort)$/;"	f
GetCd	project.vim	/^    function! s:GetCd(info, home)$/;"	f
GetFilter	project.vim	/^    function! s:GetFilter(info, parent_filter)$/;"	f
GetFlags	project.vim	/^    function! s:GetFlags(info)$/;"	f
GetHome	project.vim	/^    function! s:GetHome(info, parent_home)$/;"	f
GetScriptin	project.vim	/^    function! s:GetScriptin(info, home)$/;"	f
GetScriptout	project.vim	/^    function! s:GetScriptout(info, home)$/;"	f
GrepAll	project.vim	/^    function! s:GrepAll(recurse, lineno, pattern)$/;"	f
Init	supertab.vim	/^function! s:Init()$/;"	f
InitBuffer	supertab.vim	/^function! s:InitBuffer()$/;"	f
IsAbsolutePath	project.vim	/^    function! s:IsAbsolutePath(path)$/;"	f
ListSpawn	project.vim	/^    function! s:ListSpawn(varnamesegment)$/;"	f
LoadAll	project.vim	/^    function! s:LoadAll(recurse, line)$/;"	f
LoadAllSplit	project.vim	/^    function! s:LoadAllSplit(recurse, line)$/;"	f
ManualCompletionEnter	supertab.vim	/^function! s:ManualCompletionEnter()$/;"	f
MoveDown	project.vim	/^    function! s:MoveDown()$/;"	f
MoveUp	project.vim	/^    function! s:MoveUp()$/;"	f
OpenEntry	project.vim	/^    function! s:OpenEntry(line, precmd, editcmd, dir)$/;"	f
OpenEntry2	project.vim	/^    function! s:OpenEntry2(line, infoline, fname, editcmd)$/;"	f
Project	project.vim	/^    command -nargs=? -complete=file Project call <SID>Project('<args>')$/;"	c
Project	project.vim	/^function! s:Project(filename) " <<<$/;"	f
Project_ForEach	project.vim	/^    function! Project_ForEach(recurse, lineno, cmd, data, match)$/;"	f
Project_ForEachR	project.vim	/^    function! s:Project_ForEachR(recurse, lineno, info, cmd, data, match)$/;"	f
Project_GetAllFnames	project.vim	/^    function! Project_GetAllFnames(recurse, lineno, separator)$/;"	f
Project_GetFname	project.vim	/^    function! Project_GetFname(line)$/;"	f
RecordPrevBuffer_au	project.vim	/^    function! s:RecordPrevBuffer_au()$/;"	f
RecursivelyConstructDirectives	project.vim	/^    function! s:RecursivelyConstructDirectives(lineno)$/;"	f
RefreshEntriesFromDir	project.vim	/^    function! s:RefreshEntriesFromDir(recursive)$/;"	f
ReleaseKeyPresses	supertab.vim	/^function! s:ReleaseKeyPresses()$/;"	f
SelectCompletion	supertab.vim	/^    function! s:SelectCompletion(cr)$/;"	f
SetCompletionType	supertab.vim	/^function! s:SetCompletionType()$/;"	f
SetDefaultCompletionType	supertab.vim	/^function! s:SetDefaultCompletionType()$/;"	f
SetupAutoCommand	project.vim	/^    function! s:SetupAutoCommand(cwd)$/;"	f
SetupScriptAutoCommand	project.vim	/^    function! s:SetupScriptAutoCommand(bufcmd, script)$/;"	f
SortR	project.vim	/^    function! s:SortR(start, end)$/;"	f
Spawn	project.vim	/^    function! s:Spawn(number)$/;"	f
SpawnAll	project.vim	/^    function! s:SpawnAll(recurse, number)$/;"	f
SuperTab	supertab.vim	/^function! s:SuperTab(command)$/;"	f
SuperTabAlternateCompletion	supertab.vim	/^function! SuperTabAlternateCompletion(type)$/;"	f
SuperTabHelp	supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabHelp	supertab.vim	/^function! s:SuperTabHelp()$/;"	f
SuperTabSetCompletionType	supertab.vim	/^function! SuperTabSetCompletionType(type)$/;"	f
SuperTabSetDefaultCompletionType	supertab.vim	/^function! SuperTabSetDefaultCompletionType(type)$/;"	f
TagList_IsValid	taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
Tlist	taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
VimDirListing	project.vim	/^    function! s:VimDirListing(filter, padding, separator, filevariable, filecount, dirvariable, dircount)$/;"	f
WillComplete	supertab.vim	/^function! s:WillComplete()$/;"	f
WipeAll	project.vim	/^    function! s:WipeAll(recurse, line)$/;"	f
b:escape_spaces	project.vim	/^                let b:escape_spaces=1$/;"	v
bufname	project.vim	/^        let bufname=escape(substitute(expand('%:p', 0), '\\\\', '\/', 'g'), ' ')$/;"	v
c_d	project.vim	/^                let c_d=s:GetCd(info, '')$/;"	v
command	project.vim	/^                let command=substitute(command, '%F', escape(fnames, '\\'), 'g')$/;"	v
command	project.vim	/^                let command=substitute(command, '%d', escape(c_d, '\\'), 'g')$/;"	v
command	project.vim	/^                let command=substitute(command, '%h', escape(home, '\\'), 'g')$/;"	v
command	project.vim	/^                let command=substitute(command, '%s', escape(fnames, '\\'), 'g')$/;"	v
command	project.vim	/^                let command=substitute(g:proj_run_fold{a:number}, '%f', substitute(escape(fnames, '\\'), '\\\\ ', ' ', 'g'), 'g')$/;"	v
cr	supertab.vim	/^      let cr = (map =~? '\\(^\\|[^)]\\)<cr>')$/;"	v
ctrl_n	supertab.vim	/^    let ctrl_n = substitute(ctrl_n, '<', '<lt>', 'g')$/;"	v
ctrl_n	supertab.vim	/^  let ctrl_n = maparg('<c-n>', 'i')$/;"	v
ctrl_p	supertab.vim	/^    let ctrl_p = substitute(ctrl_p, '<', '<lt>', 'g')$/;"	v
ctrl_p	supertab.vim	/^  let ctrl_p = maparg('<c-p>', 'i')$/;"	v
fnames	project.vim	/^                let fnames=Project_GetAllFnames(a:recurse, line('.'), ' ')$/;"	v
g:C_Dictionary_File	c.vim	/^  let g:C_Dictionary_File = s:plugin_dir.'c-support\/wordlists\/c-c++-keywords.list,'.$/;"	v
g:C_Version	c.vim	/^let g:C_Version= "5.14"  							" version number of this script; do not change$/;"	v
g:SuperTabCompletionContexts	supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabCrMapping	supertab.vim	/^    let g:SuperTabCrMapping = 1$/;"	v
g:SuperTabDefaultCompletionType	supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestEnhanced	supertab.vim	/^    let g:SuperTabLongestEnhanced = 0$/;"	v
g:SuperTabLongestHighlight	supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabNoCompleteAfter	supertab.vim	/^      let g:SuperTabNoCompleteAfter = ['\\s']$/;"	v
g:SuperTabNoCompleteAfter	supertab.vim	/^      let g:SuperTabNoCompleteAfter = []$/;"	v
g:SuperTabNoCompleteBefore	supertab.vim	/^      let g:SuperTabNoCompleteBefore = ['\\k']$/;"	v
g:SuperTabNoCompleteBefore	supertab.vim	/^      let g:SuperTabNoCompleteBefore = []$/;"	v
g:SuperTabRetainCompletionDuration	supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:proj_running	project.vim	/^        let g:proj_running = bufnr(bufname.'\\>')$/;"	v
help	project.vim	/^        cnoremap <buffer> help let g:proj_doinghelp = 1<CR>:help$/;"	m
home	project.vim	/^                let home=s:GetHome(info, '')$/;"	v
info	project.vim	/^                let info=s:RecursivelyConstructDirectives(line('.'))$/;"	v
k	project.vim	/^            let k=k+1$/;"	v
k	project.vim	/^        let k=1$/;"	v
loaded_project	project.vim	/^let loaded_project=1$/;"	v
loaded_taglist	taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	taglist.vim	/^let loaded_taglist = 'available'$/;"	v
map	supertab.vim	/^      let map = maparg('<cr>', 'i')$/;"	v
map	supertab.vim	/^      let map = s:ExpandMap(map)$/;"	v
retval	project.vim	/^        let retval=b:fnamelist$/;"	v
s:Attribute	c.vim	/^let s:Attribute                = { 'below':'', 'above':'', 'start':'', 'append':'', 'insert':'' }$/;"	v
s:CFileSection	c.vim	/^let s:CFileSection	= { $/;"	v
s:C_ActualStyle	c.vim	/^let s:C_ActualStyle					= 'default'$/;"	v
s:C_ActualStyleLast	c.vim	/^let s:C_ActualStyleLast			= s:C_ActualStyle$/;"	v
s:C_Attribute	c.vim	/^let s:C_Attribute              = {}$/;"	v
s:C_C99Libs	c.vim	/^let s:C_C99Libs       = [$/;"	v
s:C_C99LibsClean	c.vim	/^let	s:C_C99LibsClean					= C_CleanDirNameList( s:C_C99Libs )$/;"	v
s:C_CComment	c.vim	/^let s:C_CComment         = '\\\/\\*.\\{-}\\*\\\/\\s*'		" C comment with trailing whitespaces$/;"	v
s:C_CCompiler	c.vim	/^	let s:C_CCompiler           = 'gcc'      " the C   compiler$/;"	v
s:C_CCompiler	c.vim	/^	let s:C_CCompiler           = 'gcc.exe'  " the C   compiler$/;"	v
s:C_CExtension	c.vim	/^let s:C_CExtension     				= 'c'                    " C file extension; everything else is C++$/;"	v
s:C_CFlags	c.vim	/^let s:C_CFlags         				= '-Wall -g -O0 -c'      " compiler flags: compile, don't optimize$/;"	v
s:C_CodeCheckExeName	c.vim	/^let s:C_CodeCheckExeName      = 'check'$/;"	v
s:C_CodeCheckIsExecutable	c.vim	/^	let s:C_CodeCheckIsExecutable	= 1$/;"	v
s:C_CodeCheckIsExecutable	c.vim	/^let s:C_CodeCheckIsExecutable	= 0$/;"	v
s:C_CodeCheckOptions	c.vim	/^let s:C_CodeCheckOptions      = '-K13'$/;"	v
s:C_CodeSnippets	c.vim	/^	let s:C_CodeSnippets  				= $HOME.'\/.vim\/c-support\/codesnippets\/'$/;"	v
s:C_CodeSnippets	c.vim	/^	let s:C_CodeSnippets  				= $HOME.'\/vimfiles\/c-support\/codesnippets\/'$/;"	v
s:C_Com1	c.vim	/^let s:C_Com1          				 = '\/*'     " C-style : comment start$/;"	v
s:C_Com2	c.vim	/^let s:C_Com2          				 = '*\/'     " C-style : comment end$/;"	v
s:C_CplusCompiler	c.vim	/^	let s:C_CplusCompiler       = 'g++'      " the C++ compiler$/;"	v
s:C_CplusCompiler	c.vim	/^	let s:C_CplusCompiler       = 'g++.exe'  " the C++ compiler$/;"	v
s:C_CppComment	c.vim	/^let s:C_CppComment       = '\\\/\\\/.*$'						" C++ comment$/;"	v
s:C_Ctrl_j	c.vim	/^let s:C_Ctrl_j								= 'on'$/;"	v
s:C_Display	c.vim	/^	let s:C_Display			= $DISPLAY$/;"	v
s:C_Display	c.vim	/^	let s:C_Display     = ''$/;"	v
s:C_DocBufferName	c.vim	/^let s:C_DocBufferName       = "C_HELP"$/;"	v
s:C_DocHelpBufferNumber	c.vim	/^let s:C_DocHelpBufferNumber = -1$/;"	v
s:C_ExeExtension	c.vim	/^	let s:C_ExeExtension        = ''         " file extension for executables (leading point required)$/;"	v
s:C_ExeExtension	c.vim	/^	let s:C_ExeExtension        = '.exe'     " file extension for executables (leading point required)$/;"	v
s:C_ExpansionCounter	c.vim	/^let s:C_ExpansionCounter       = {}$/;"	v
s:C_ExpansionLimit	c.vim	/^let s:C_ExpansionLimit         = 10$/;"	v
s:C_ExpansionRegex	c.vim	/^let s:C_ExpansionRegex				 = '|?'.s:C_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:C_FileVisited	c.vim	/^let s:C_FileVisited            = []$/;"	v
s:C_ForTypes	c.vim	/^let s:C_ForTypes     = [$/;"	v
s:C_ForTypes_Check_Order	c.vim	/^let s:C_ForTypes_Check_Order     = [$/;"	v
s:C_FormatDate	c.vim	/^let s:C_FormatDate						= '%x'$/;"	v
s:C_FormatTime	c.vim	/^let s:C_FormatTime						= '%X'$/;"	v
s:C_FormatYear	c.vim	/^let s:C_FormatYear						= '%Y'$/;"	v
s:C_GlobalTemplateDir	c.vim	/^		let s:C_GlobalTemplateDir		= s:plugin_dir.'c-support\/templates'$/;"	v
s:C_GlobalTemplateDir	c.vim	/^	let s:C_GlobalTemplateDir	= fnamemodify( s:C_GlobalTemplateFile, ":h" )$/;"	v
s:C_GlobalTemplateDir	c.vim	/^let s:C_GlobalTemplateDir	= ''$/;"	v
s:C_GlobalTemplateFile	c.vim	/^		let s:C_GlobalTemplateFile  = s:C_GlobalTemplateDir.'\/Templates'$/;"	v
s:C_GlobalTemplateFile	c.vim	/^let s:C_GlobalTemplateFile= ''$/;"	v
s:C_GuiSnippetBrowser	c.vim	/^let s:C_GuiSnippetBrowser     = 'gui'										" gui \/ commandline$/;"	v
s:C_GuiTemplateBrowser	c.vim	/^let s:C_GuiTemplateBrowser    = 'gui'										" gui \/ explorer \/ commandline$/;"	v
s:C_HlMessage	c.vim	/^let s:C_HlMessage    = ""$/;"	v
s:C_If0_Counter	c.vim	/^let s:C_If0_Counter   = 0$/;"	v
s:C_If0_Txt	c.vim	/^let s:C_If0_Txt		 		= "If0Label_"$/;"	v
s:C_IndentErrorLog	c.vim	/^	let s:C_IndentErrorLog				= $HOME.'\/.indent.errorlog'$/;"	v
s:C_IndentErrorLog	c.vim	/^	let s:C_IndentErrorLog				= $HOME.'\/_indent.errorlog'$/;"	v
s:C_LFlags	c.vim	/^let s:C_LFlags         				= '-Wall -g -O0'         " compiler flags: link   , don't optimize$/;"	v
s:C_Libs	c.vim	/^let s:C_Libs           				= '-lm'                  " libraries to use$/;"	v
s:C_LineEndCommColDefault	c.vim	/^let s:C_LineEndCommColDefault = 49$/;"	v
s:C_LoadMenus	c.vim	/^let s:C_LoadMenus      				= 'yes'$/;"	v
s:C_LocalTemplateDir	c.vim	/^	let s:C_LocalTemplateDir      = fnamemodify( s:C_LocalTemplateFile, ":p:h" ).'\/'$/;"	v
s:C_LocalTemplateFile	c.vim	/^	let s:C_LocalTemplateFile     = $HOME.'\/.vim\/c-support\/templates\/Templates'$/;"	v
s:C_LocalTemplateFile	c.vim	/^	let s:C_LocalTemplateFile     = $HOME.'\/vimfiles\/c-support\/templates\/Templates'$/;"	v
s:C_Macro	c.vim	/^let s:C_Macro                  = {'|AUTHOR|'         : 'first name surname',$/;"	v
s:C_MacroCommentRegex	c.vim	/^let s:C_MacroCommentRegex			 = '^\\$'$/;"	v
s:C_MacroFlag	c.vim	/^let	s:C_MacroFlag								= {	':l' : 'lowercase'			,$/;"	v
s:C_MacroLineRegex	c.vim	/^let s:C_MacroLineRegex				 = '^\\s*|'.s:C_MacroNameRegex.'|\\s*=\\s*\\(.*\\)'$/;"	v
s:C_MacroNameRegex	c.vim	/^let s:C_MacroNameRegex         = '\\([a-zA-Z][a-zA-Z0-9_]*\\)'$/;"	v
s:C_MakeCmdLineArgs	c.vim	/^let s:C_MakeCmdLineArgs   	= ''   " command line arguments for Run-make; initially empty$/;"	v
s:C_MakeExecutableToRun	c.vim	/^let s:C_MakeExecutableToRun	= ''$/;"	v
s:C_Man	c.vim	/^	let s:C_Man                 = 'man'      " the manual program$/;"	v
s:C_Man	c.vim	/^	let s:C_Man                 = 'man.exe'  " the manual program$/;"	v
s:C_MenuHeader	c.vim	/^let s:C_MenuHeader     				= 'yes'$/;"	v
s:C_MenuVisible	c.vim	/^let s:C_MenuVisible = 0								" state variable controlling the C-menus$/;"	v
s:C_NonExpansionRegex	c.vim	/^let s:C_NonExpansionRegex			 = '|'.s:C_MacroNameRegex.'\\(:\\a\\)\\?|'$/;"	v
s:C_ObjExtension	c.vim	/^	let s:C_ObjExtension        = '.o'       " file extension for objects (leading point required)$/;"	v
s:C_ObjExtension	c.vim	/^	let s:C_ObjExtension        = '.obj'     " file extension for objects (leading point required)$/;"	v
s:C_OutputBufferName	c.vim	/^let s:C_OutputBufferName   = "C-Output"$/;"	v
s:C_OutputBufferNumber	c.vim	/^let s:C_OutputBufferNumber = -1$/;"	v
s:C_OutputGvim	c.vim	/^let s:C_OutputGvim            = 'vim'$/;"	v
s:C_Printheader	c.vim	/^let s:C_Printheader           = "%<%f%h%m%<  %=%{strftime('%x %X')}     Page %N"$/;"	v
s:C_Printheader	c.vim	/^let s:C_Printheader  = escape( s:C_Printheader, ' %' )$/;"	v
s:C_Prototype	c.vim	/^let s:C_Prototype        = []$/;"	v
s:C_PrototypeCounter	c.vim	/^let s:C_PrototypeCounter = 0$/;"	v
s:C_PrototypeShow	c.vim	/^let s:C_PrototypeShow    = []$/;"	v
s:C_Root	c.vim	/^let s:C_Root  	       				= '&C\\\/C\\+\\+.'           " the name of the root menu of this plugin$/;"	v
s:C_RunMsg1	c.vim	/^let s:C_RunMsg1						 ="' does not exist or is not executable or object\/source older then executable"$/;"	v
s:C_RunMsg2	c.vim	/^let s:C_RunMsg2						 ="' does not exist or is not executable"$/;"	v
s:C_SourceCodeExtensions	c.vim	/^let s:C_SourceCodeExtensions  = 'c cc cp cxx cpp CPP c++ C i ii'$/;"	v
s:C_SourceCodeExtensionsList	c.vim	/^let s:C_SourceCodeExtensionsList	= split( s:C_SourceCodeExtensions, '\\s\\+' )$/;"	v
s:C_SplintIsExecutable	c.vim	/^	let s:C_SplintIsExecutable	= 1$/;"	v
s:C_SplintIsExecutable	c.vim	/^let s:C_SplintIsExecutable	= 0$/;"	v
s:C_StandardLibs	c.vim	/^let s:C_StandardLibs       = [$/;"	v
s:C_StandardLibsClean	c.vim	/^let	s:C_StandardLibsClean			= C_CleanDirNameList( s:C_StandardLibs )$/;"	v
s:C_StartMultilineComment	c.vim	/^let s:C_StartMultilineComment	= '^\\s*\\\/\\*[\\*! ]\\='$/;"	v
s:C_TJT	c.vim	/^let s:C_TJT										 = '[ 0-9a-zA-Z_]*'$/;"	v
s:C_Template	c.vim	/^let s:C_Template             = { 'default' : {} }$/;"	v
s:C_TemplateEndif	c.vim	/^let s:C_TemplateEndif					 = '^==\\s*ENDIF\\s*=='$/;"	v
s:C_TemplateIf	c.vim	/^let s:C_TemplateIf						 = '^==\\s*IF\\s\\+|STYLE|\\s\\+IS\\s\\+'.s:C_MacroNameRegex.'\\s*=='$/;"	v
s:C_TemplateJumpTarget1	c.vim	/^let s:C_TemplateJumpTarget1    = '<+'.s:C_TJT.'+>\\|{+'.s:C_TJT.'+}'$/;"	v
s:C_TemplateJumpTarget2	c.vim	/^let s:C_TemplateJumpTarget2    = '<-'.s:C_TJT.'->\\|{-'.s:C_TJT.'-}'$/;"	v
s:C_TemplateLineRegex	c.vim	/^let s:C_TemplateLineRegex			 = '^==\\s*\\([a-zA-Z][0-9a-zA-Z'.s:C_TemplateNameDelimiter$/;"	v
s:C_TemplateLineRegex	c.vim	/^let s:C_TemplateLineRegex			.= ']\\+\\)\\s*==\\s*\\([a-z]\\+\\s*==\\)\\?'$/;"	v
s:C_TemplateNameDelimiter	c.vim	/^let s:C_TemplateNameDelimiter  = '-+_,\\. '$/;"	v
s:C_TemplateOverwrittenMsg	c.vim	/^let s:C_TemplateOverwrittenMsg= 'yes'$/;"	v
s:C_TypeOfH	c.vim	/^let s:C_TypeOfH               = 'cpp'$/;"	v
s:C_VimCompilerName	c.vim	/^let s:C_VimCompilerName				= 'gcc'      " the compiler name used by :compiler$/;"	v
s:C_Wrapper	c.vim	/^let s:C_Wrapper               = s:plugin_dir.'c-support\/scripts\/wrapper.sh'$/;"	v
s:C_XtermDefaults	c.vim	/^	let s:C_XtermDefaults	= s:C_XtermDefaults." -geometry 80x24"$/;"	v
s:C_XtermDefaults	c.vim	/^let s:C_XtermDefaults         = '-fa courier -fs 12 -geometry 80x24'$/;"	v
s:Comments	c.vim	/^let s:Comments     = s:C_Root.'&Comments'$/;"	v
s:Cpp	c.vim	/^let s:Cpp          = s:C_Root.'C&++'$/;"	v
s:Cpp_CStandardLibs	c.vim	/^let s:Cpp_CStandardLibs       = [$/;"	v
s:Cpp_CStandardLibsClean	c.vim	/^let	s:Cpp_CStandardLibsClean	= C_CleanDirNameList( s:Cpp_CStandardLibs )$/;"	v
s:Cpp_IosFlagBits	c.vim	/^let s:Cpp_IosFlagBits       = [$/;"	v
s:Cpp_StandardLibs	c.vim	/^let s:Cpp_StandardLibs       = [$/;"	v
s:Cpp_StandardLibsClean	c.vim	/^let	s:Cpp_StandardLibsClean		= C_CleanDirNameList( s:Cpp_StandardLibs )$/;"	v
s:HFileSection	c.vim	/^let s:HFileSection	= { $/;"	v
s:Idioms	c.vim	/^let s:Idioms       = s:C_Root.'&Idioms'$/;"	v
s:KeywordComment	c.vim	/^let s:KeywordComment	= { $/;"	v
s:LastShellReturnCode	c.vim	/^let s:LastShellReturnCode	= 0			" for compile \/ link \/ run only$/;"	v
s:MSWIN	c.vim	/^let s:MSWIN = has("win16") || has("win32")   || has("win64")    || has("win95")$/;"	v
s:MsgInsNotAvail	c.vim	/^let s:MsgInsNotAvail	= "insertion not available for a fold" $/;"	v
s:Preprocessor	c.vim	/^let s:Preprocessor = s:C_Root.'&Preprocessor'$/;"	v
s:Run	c.vim	/^let s:Run          = s:C_Root.'&Run'$/;"	v
s:Snippets	c.vim	/^let s:Snippets     = s:C_Root.'S&nippets'$/;"	v
s:SpecialComment	c.vim	/^let s:SpecialComment	= { $/;"	v
s:Statements	c.vim	/^let s:Statements   = s:C_Root.'&Statements'$/;"	v
s:Tlist_Skip_Refresh	taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:UNIX	c.vim	/^let s:UNIX	= has("unix")  || has("macunix") || has("win32unix")$/;"	v
s:c_cppcomment	c.vim	/^let	s:c_cppcomment= '\\(\\\/\\*.\\{-}\\*\\\/\\|\\\/\\\/.*$\\)'$/;"	v
s:cpo_save	taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:escfilename	c.vim	/^  let s:escfilename 	= ' \\%#[]'$/;"	v
s:escfilename	c.vim	/^  let s:escfilename 	= ''$/;"	v
s:installation	c.vim	/^		let s:installation					= 'system'$/;"	v
s:installation	c.vim	/^let s:installation				= 'local'$/;"	v
s:menu_char_prefix	taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:modes	supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:plugin_dir	c.vim	/^		let s:plugin_dir						= $VIM.'\/vimfiles\/'$/;"	v
s:plugin_dir	c.vim	/^		let s:plugin_dir  					= $HOME.'\/vimfiles\/'$/;"	v
s:plugin_dir	c.vim	/^		let s:plugin_dir  	= $HOME.'\/.vim\/'$/;"	v
s:save_cpo	supertab.vim	/^let s:save_cpo=&cpo$/;"	v
s:sourced_script_file	c.vim	/^let	s:sourced_script_file	= expand("<sfile>")$/;"	v
s:style	c.vim	/^let	s:style			= 'default'$/;"	v
s:tabHelp	supertab.vim	/^  let s:tabHelp =$/;"	v
s:tlist_app_name	taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:types	supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	supertab.vim	/^  let s:types =$/;"	v
s:vimfiles	c.vim	/^let s:vimfiles						= $VIM$/;"	v
